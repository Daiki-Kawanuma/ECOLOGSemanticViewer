<controls:MetroWindow x:Class="ECOLOGSemanticViewer.Views.Windows.MainWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                      xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                      xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
                      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                      xmlns:u="clr-namespace:ECOLOGSemanticViewer.Utils"
                      xmlns:v="clr-namespace:ECOLOGSemanticViewer.Views"
                      xmlns:vm="clr-namespace:ECOLOGSemanticViewer.ViewModels.WindowViewModels"
                      Title="MainWindow"
                      Width="800"
                      Height="600"
                      Background="{DynamicResource MaterialDesignPaper}"
                      FontFamily="{StaticResource MaterialDesignFont}"
                      TextElement.FontSize="13"
                      TextElement.FontWeight="Regular"
                      TextElement.Foreground="{DynamicResource MaterialDesignBody}"
                      TextOptions.TextFormattingMode="Ideal"
                      TextOptions.TextRenderingMode="Auto"
                      WindowState="Maximized">

    <Window.DataContext>
        <vm:MainWindowViewModel />
    </Window.DataContext>


    <i:Interaction.Triggers>

        <!--  Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう  -->
        <!--  Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります  -->
        <!--  Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています  -->

        <!--  WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます  -->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodName="Initialize" MethodTarget="{Binding}" />
        </i:EventTrigger>

        <!--  Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます  -->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </i:EventTrigger>

        <!--  WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください  -->

    </i:Interaction.Triggers>

    <Grid>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*" />
            <ColumnDefinition Width="3*" />
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0">

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0"
                        Margin="10, 10, 10, 0"
                        Background="White"
                        Orientation="Vertical">

                <Button Click="Button_Click_Map" Content="Map" />
                <Button Margin="0,1,0,1"
                        Click="Button_Click_Energy"
                        Content="Energy distribution" />
                <Button Click="Button_Click_Time" Content="Time distribution" />

            </StackPanel>

            <materialDesign:Card Grid.Row="1" Margin="5,5,5,5">

                <StackPanel Orientation="Vertical">

                    <Label Content="Trip direction" FontSize="16" />

                    <Button Name="ButtonOutward" Margin="5,5,5,0"
                            Click="Button_Click_Outward"
                            Content="Outward"
                            Style="{StaticResource MaterialDesignFlatButton}" />
                    <Button Name="ButtonHomeward" Margin="5,5,5,5"
                            Click="Button_Click_Homeward"
                            Content="Homeward"
                            Style="{StaticResource MaterialDesignFlatButton}" />

                </StackPanel>

            </materialDesign:Card>

            <materialDesign:Card Grid.Row="2" Margin="5,5,5,5">

                <StackPanel Orientation="Vertical">

                    <Label Content="Default semantic links" FontSize="16" />

                    <Button Margin="5,5,5,0"
                            Click="Button_Click_OutwardLinks"
                            Content="Outward"
                            Style="{StaticResource MaterialDesignFlatButton}" />
                    <Button Margin="5,5,5,5"
                            Click="Button_Click_HomewardLinks"
                            Content="Homeward"
                            Style="{StaticResource MaterialDesignFlatButton}" />

                </StackPanel>

            </materialDesign:Card>

            <materialDesign:Card Grid.Row="3" Margin="5,0,5,5">

                <StackPanel Orientation="Vertical">

                    <ComboBox Margin="5,5,5,5"
                              DisplayMemberPath="Semantics"
                              ItemsSource="{Binding SemanticLinks}"
                              SelectedValue="{Binding SelectedSemanticLink}" />

                    <Button Grid.Row="1"
                            Margin="5,0,5,5"
                            Click="Button_Click_AddLink"
                            Content="Add"
                            Style="{StaticResource MaterialDesignFlatButton}" />

                </StackPanel>

            </materialDesign:Card>

            <materialDesign:Card Grid.Row="4"
                                 Margin="5, 0,5, 5"
                                 VerticalAlignment="Stretch">

                <DataGrid AutoGenerateColumns="False"
                          IsReadOnly="True"
                          ItemsSource="{Binding ExtractedSemanticLinks}"
                          VerticalScrollBarVisibility="Auto">

                    <DataGrid.Columns>
                        <DataGridTextColumn Width="1*"
                                            Binding="{Binding Path=SemanticLinkId}"
                                            Header="ID" />
                        <DataGridTextColumn Width="2*"
                                            Binding="{Binding Path=Semantics}"
                                            Header="Semantics" />
                    </DataGrid.Columns>

                </DataGrid>

            </materialDesign:Card>

            <Button Grid.Row="5"
                    Margin="10, 0,10, 10"
                    VerticalAlignment="Bottom"
                    Click="Button_Click_ShowDetailWindow"
                    Content="Display" />

        </Grid>

        <Frame Name="MainFrame"
               Grid.Column="1"
               Content="{Binding CurrentPage}"
               NavigationUIVisibility="Hidden" />

    </Grid>

</controls:MetroWindow>
