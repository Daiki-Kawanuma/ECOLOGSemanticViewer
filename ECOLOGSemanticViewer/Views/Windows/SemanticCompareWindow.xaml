<controls:MetroWindow x:Class="ECOLOGSemanticViewer.Views.Windows.SemanticCompareWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                      xmlns:dockablz="clr-namespace:Dragablz.Dockablz;assembly=Dragablz"
                      xmlns:dragablz="clr-namespace:Dragablz;assembly=Dragablz"
                      xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                      xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
                      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                      xmlns:u="clr-namespace:ECOLOGSemanticViewer.Utils"
                      xmlns:v="clr-namespace:ECOLOGSemanticViewer.Views"
                      xmlns:vm="clr-namespace:ECOLOGSemanticViewer.ViewModels.WindowViewModels"
                      Title="MainWindow"
                      Width="800"
                      Height="600"
                      Background="{DynamicResource MaterialDesignPaper}"
                      FontFamily="{StaticResource MaterialDesignFont}"
                      TextElement.FontSize="13"
                      TextElement.FontWeight="Regular"
                      TextElement.Foreground="{DynamicResource MaterialDesignBody}"
                      TextOptions.TextFormattingMode="Ideal"
                      TextOptions.TextRenderingMode="Auto"
                      WindowState="Maximized">

    <Window.DataContext>
        <vm:SemanticCompareWindowViewModel />
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--  Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう  -->
        <!--  Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります  -->
        <!--  Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています  -->

        <!--  WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます  -->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodName="Initialize" MethodTarget="{Binding}" />
        </i:EventTrigger>

        <!--  Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます  -->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </i:EventTrigger>

        <!--  WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください  -->

    </i:Interaction.Triggers>


    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>



        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>

            <Button Grid.Column="0" Content="Energy distribution" />
            <Button Grid.Column="1" Content="Time distribution" />
            <Button Grid.Column="2" Content="Heat map" />

        </Grid>

        <Frame Name="GraphFrame"
               Grid.Row="1"
               Content="{Binding CurrentPage}"
               NavigationUIVisibility="Hidden" />

    </Grid>

</controls:MetroWindow>